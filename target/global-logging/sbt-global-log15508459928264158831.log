[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Ciprian\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Ciprian\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 17.0.6)
[debug]       Load.loadUnit: plugins took 177.8538ms
[debug]       Load.loadUnit: defsScala took 0.5216ms
[debug] [Loading] Scanning directory C:\Users\Ciprian\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Ciprian\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 40.63 ms
[debug]           Load.resolveProject(global-plugins) took 54.7113ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Ciprian\.sbt\1.0\plugins, plugins: List(<none>))) took 128.3318ms
[debug] [Loading] Done in C:\Users\Ciprian\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 160.9068ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3007ms
[debug]     Load.loadUnit(file:/C:/Users/Ciprian/.sbt/1.0/plugins/, ...) took 355.4975ms
[debug]   Load.apply: load took 586.773ms
[debug]   Load.apply: resolveProjects took 6.0524ms
[debug]   Load.apply: finalTransforms took 65.2268ms
[debug]   Load.apply: config.delegates took 8.2381ms
[debug]   Load.apply: Def.make(settings)... took 439.4684ms
[debug]   Load.apply: structureIndex took 126.8045ms
[debug]   Load.apply: mkStreams took 1.8802ms
[info] loading global plugins from C:\Users\Ciprian\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5742.3227ms
[debug]           Load.loadUnit: plugins took 36.6027ms
[debug]           Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory W:\PP\PP_homeworks\Tema1PP-skel\project
[debug]             Load.loadUnit: mkEval took 6.9834ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in W:\PP\PP_homeworks\Tema1PP-skel\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8286 ms
[info] loading settings for project tema1pp-skel-build from idea.sbt ...
[debug]               Load.resolveProject(tema1pp-skel-build) took 3.0009ms
[debug]             Load.loadTransitive: finalizeProject(Project(id tema1pp-skel-build, base: W:\PP\PP_homeworks\Tema1PP-skel\project, plugins: List(<none>))) took 5.3052ms
[debug] [Loading] Done in W:\PP\PP_homeworks\Tema1PP-skel\project, returning: (tema1pp-skel-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2420.7483ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.3283ms
[debug]         Load.loadUnit(file:/W:/PP/PP_homeworks/Tema1PP-skel/project/, ...) took 2464.6995ms
[debug]       Load.apply: load took 2465.949ms
[debug]       Load.apply: resolveProjects took 0.1151ms
[debug]       Load.apply: finalTransforms took 16.3903ms
[debug]       Load.apply: config.delegates took 0.4206ms
[debug]       Load.apply: Def.make(settings)... took 123.9584ms
[debug]       Load.apply: structureIndex took 41.9759ms
[debug]       Load.apply: mkStreams took 0.0036ms
[info] loading project definition from W:\PP\PP_homeworks\Tema1PP-skel\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4332.6016ms
[debug]     Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory W:\PP\PP_homeworks\Tema1PP-skel
[debug]       Load.loadUnit: mkEval took 0.2764ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in W:\PP\PP_homeworks\Tema1PP-skel, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3236 ms
[info] loading settings for project tema1pp-skel from build.sbt ...
[debug]         Load.resolveProject(tema1pp-skel) took 33.142ms
[debug]       Load.loadTransitive: finalizeProject(Project(id tema1pp-skel, base: W:\PP\PP_homeworks\Tema1PP-skel, plugins: List(<none>))) took 36.8986ms
[debug] [Loading] Done in W:\PP\PP_homeworks\Tema1PP-skel, returning: (tema1pp-skel)
[debug]     Load.loadUnit: loadedProjectsRaw took 1294.7628ms
[debug]     Load.loadUnit: cleanEvalClasses took 63.1484ms
[debug]   Load.loadUnit(file:/W:/PP/PP_homeworks/Tema1PP-skel/, ...) took 5691.6275ms
[debug] Load.apply: load took 5693.2347ms
[debug] Load.apply: resolveProjects took 0.1233ms
[debug] Load.apply: finalTransforms took 29.4265ms
[debug] Load.apply: config.delegates took 0.2926ms
[debug] Load.apply: Def.make(settings)... took 66.7281ms
[debug] Load.apply: structureIndex took 22.784ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to TemaScala (in build file:/W:/PP/PP_homeworks/Tema1PP-skel/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50285 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50285, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to TemaScala (in build file:/W:/PP/PP_homeworks/Tema1PP-skel/)
[debug] > Exec(idea-shell, None, None)
